// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/greeting.proto

package gRPC_BiDirectional_Streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingServiceClient is the client API for GreetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingServiceClient interface {
	GreetEveryOne(ctx context.Context, opts ...grpc.CallOption) (GreetingService_GreetEveryOneClient, error)
	MaxCalculator(ctx context.Context, opts ...grpc.CallOption) (GreetingService_MaxCalculatorClient, error)
}

type greetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingServiceClient(cc grpc.ClientConnInterface) GreetingServiceClient {
	return &greetingServiceClient{cc}
}

func (c *greetingServiceClient) GreetEveryOne(ctx context.Context, opts ...grpc.CallOption) (GreetingService_GreetEveryOneClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[0], "/Greeting.GreetingService/GreetEveryOne", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceGreetEveryOneClient{stream}
	return x, nil
}

type GreetingService_GreetEveryOneClient interface {
	Send(*GreetRequest) error
	Recv() (*GreetResponse, error)
	grpc.ClientStream
}

type greetingServiceGreetEveryOneClient struct {
	grpc.ClientStream
}

func (x *greetingServiceGreetEveryOneClient) Send(m *GreetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingServiceGreetEveryOneClient) Recv() (*GreetResponse, error) {
	m := new(GreetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetingServiceClient) MaxCalculator(ctx context.Context, opts ...grpc.CallOption) (GreetingService_MaxCalculatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingService_ServiceDesc.Streams[1], "/Greeting.GreetingService/MaxCalculator", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingServiceMaxCalculatorClient{stream}
	return x, nil
}

type GreetingService_MaxCalculatorClient interface {
	Send(*MaxCalculatorRequest) error
	Recv() (*MaxCalculatorResponse, error)
	grpc.ClientStream
}

type greetingServiceMaxCalculatorClient struct {
	grpc.ClientStream
}

func (x *greetingServiceMaxCalculatorClient) Send(m *MaxCalculatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingServiceMaxCalculatorClient) Recv() (*MaxCalculatorResponse, error) {
	m := new(MaxCalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServiceServer is the server API for GreetingService service.
// All implementations must embed UnimplementedGreetingServiceServer
// for forward compatibility
type GreetingServiceServer interface {
	GreetEveryOne(GreetingService_GreetEveryOneServer) error
	MaxCalculator(GreetingService_MaxCalculatorServer) error
	mustEmbedUnimplementedGreetingServiceServer()
}

// UnimplementedGreetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServiceServer struct {
}

func (UnimplementedGreetingServiceServer) GreetEveryOne(GreetingService_GreetEveryOneServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetEveryOne not implemented")
}
func (UnimplementedGreetingServiceServer) MaxCalculator(GreetingService_MaxCalculatorServer) error {
	return status.Errorf(codes.Unimplemented, "method MaxCalculator not implemented")
}
func (UnimplementedGreetingServiceServer) mustEmbedUnimplementedGreetingServiceServer() {}

// UnsafeGreetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServiceServer will
// result in compilation errors.
type UnsafeGreetingServiceServer interface {
	mustEmbedUnimplementedGreetingServiceServer()
}

func RegisterGreetingServiceServer(s grpc.ServiceRegistrar, srv GreetingServiceServer) {
	s.RegisterService(&GreetingService_ServiceDesc, srv)
}

func _GreetingService_GreetEveryOne_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServiceServer).GreetEveryOne(&greetingServiceGreetEveryOneServer{stream})
}

type GreetingService_GreetEveryOneServer interface {
	Send(*GreetResponse) error
	Recv() (*GreetRequest, error)
	grpc.ServerStream
}

type greetingServiceGreetEveryOneServer struct {
	grpc.ServerStream
}

func (x *greetingServiceGreetEveryOneServer) Send(m *GreetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingServiceGreetEveryOneServer) Recv() (*GreetRequest, error) {
	m := new(GreetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetingService_MaxCalculator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServiceServer).MaxCalculator(&greetingServiceMaxCalculatorServer{stream})
}

type GreetingService_MaxCalculatorServer interface {
	Send(*MaxCalculatorResponse) error
	Recv() (*MaxCalculatorRequest, error)
	grpc.ServerStream
}

type greetingServiceMaxCalculatorServer struct {
	grpc.ServerStream
}

func (x *greetingServiceMaxCalculatorServer) Send(m *MaxCalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingServiceMaxCalculatorServer) Recv() (*MaxCalculatorRequest, error) {
	m := new(MaxCalculatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingService_ServiceDesc is the grpc.ServiceDesc for GreetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeting.GreetingService",
	HandlerType: (*GreetingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetEveryOne",
			Handler:       _GreetingService_GreetEveryOne_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MaxCalculator",
			Handler:       _GreetingService_MaxCalculator_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greeting.proto",
}
