// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/greeting.proto

package gRPC_client_streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingClient is the client API for Greeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingClient interface {
	KeepGreeting(ctx context.Context, opts ...grpc.CallOption) (Greeting_KeepGreetingClient, error)
	AvgCalculator(ctx context.Context, opts ...grpc.CallOption) (Greeting_AvgCalculatorClient, error)
}

type greetingClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingClient(cc grpc.ClientConnInterface) GreetingClient {
	return &greetingClient{cc}
}

func (c *greetingClient) KeepGreeting(ctx context.Context, opts ...grpc.CallOption) (Greeting_KeepGreetingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeting_ServiceDesc.Streams[0], "/greeting.Greeting/KeepGreeting", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingKeepGreetingClient{stream}
	return x, nil
}

type Greeting_KeepGreetingClient interface {
	Send(*GreetingRequest) error
	CloseAndRecv() (*GreetingResponse, error)
	grpc.ClientStream
}

type greetingKeepGreetingClient struct {
	grpc.ClientStream
}

func (x *greetingKeepGreetingClient) Send(m *GreetingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingKeepGreetingClient) CloseAndRecv() (*GreetingResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetingClient) AvgCalculator(ctx context.Context, opts ...grpc.CallOption) (Greeting_AvgCalculatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeting_ServiceDesc.Streams[1], "/greeting.Greeting/AvgCalculator", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingAvgCalculatorClient{stream}
	return x, nil
}

type Greeting_AvgCalculatorClient interface {
	Send(*CalculatorRequest) error
	CloseAndRecv() (*CalculatorResponse, error)
	grpc.ClientStream
}

type greetingAvgCalculatorClient struct {
	grpc.ClientStream
}

func (x *greetingAvgCalculatorClient) Send(m *CalculatorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingAvgCalculatorClient) CloseAndRecv() (*CalculatorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CalculatorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServer is the server API for Greeting service.
// All implementations must embed UnimplementedGreetingServer
// for forward compatibility
type GreetingServer interface {
	KeepGreeting(Greeting_KeepGreetingServer) error
	AvgCalculator(Greeting_AvgCalculatorServer) error
	mustEmbedUnimplementedGreetingServer()
}

// UnimplementedGreetingServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServer struct {
}

func (UnimplementedGreetingServer) KeepGreeting(Greeting_KeepGreetingServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepGreeting not implemented")
}
func (UnimplementedGreetingServer) AvgCalculator(Greeting_AvgCalculatorServer) error {
	return status.Errorf(codes.Unimplemented, "method AvgCalculator not implemented")
}
func (UnimplementedGreetingServer) mustEmbedUnimplementedGreetingServer() {}

// UnsafeGreetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServer will
// result in compilation errors.
type UnsafeGreetingServer interface {
	mustEmbedUnimplementedGreetingServer()
}

func RegisterGreetingServer(s grpc.ServiceRegistrar, srv GreetingServer) {
	s.RegisterService(&Greeting_ServiceDesc, srv)
}

func _Greeting_KeepGreeting_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServer).KeepGreeting(&greetingKeepGreetingServer{stream})
}

type Greeting_KeepGreetingServer interface {
	SendAndClose(*GreetingResponse) error
	Recv() (*GreetingRequest, error)
	grpc.ServerStream
}

type greetingKeepGreetingServer struct {
	grpc.ServerStream
}

func (x *greetingKeepGreetingServer) SendAndClose(m *GreetingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingKeepGreetingServer) Recv() (*GreetingRequest, error) {
	m := new(GreetingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeting_AvgCalculator_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServer).AvgCalculator(&greetingAvgCalculatorServer{stream})
}

type Greeting_AvgCalculatorServer interface {
	SendAndClose(*CalculatorResponse) error
	Recv() (*CalculatorRequest, error)
	grpc.ServerStream
}

type greetingAvgCalculatorServer struct {
	grpc.ServerStream
}

func (x *greetingAvgCalculatorServer) SendAndClose(m *CalculatorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingAvgCalculatorServer) Recv() (*CalculatorRequest, error) {
	m := new(CalculatorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeting_ServiceDesc is the grpc.ServiceDesc for Greeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greeting.Greeting",
	HandlerType: (*GreetingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepGreeting",
			Handler:       _Greeting_KeepGreeting_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AvgCalculator",
			Handler:       _Greeting_AvgCalculator_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greeting.proto",
}
